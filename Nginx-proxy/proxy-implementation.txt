To set up Nginx as a proxy for a deployment with an Apache server running inside a Kubernetes pod, you'll need to follow these steps:

### 1. Set Up Your Apache Deployment

Assuming you already have an Apache deployment running inside a Kubernetes pod, your setup might look like this:

**Example Apache Deployment:**

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: apache-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: apache
  template:
    metadata:
      labels:
        app: apache
    spec:
      containers:
      - name: apache
        image: httpd:latest
        ports:
        - containerPort: 80
```

**Service for Apache Deployment:**

```yaml
apiVersion: v1
kind: Service
metadata:
  name: apache-service
spec:
  selector:
    app: apache
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
```

### 2. Create Nginx Deployment and Service

You'll now create a deployment for Nginx that will serve as the reverse proxy, and configure it to forward requests to your Apache server.

**Example Nginx Deployment:**

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
```

**Example Nginx ConfigMap:**

Create a ConfigMap that contains the Nginx configuration. This file should be named `nginx.conf` and include the proxy settings.

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  nginx.conf: |
    events {
      worker_connections 1024;
    }

    http {
      server {
        listen 80;

        location / {
          proxy_pass http://apache-service:80;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
        }
      }
    }
```

**Nginx Service:**

```yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
```

### 3. Apply Your Configurations

Save each of the YAML configurations to files and apply them using `kubectl`:

```sh
kubectl apply -f apache-deployment.yaml
kubectl apply -f apache-service.yaml
kubectl apply -f nginx-configmap.yaml
kubectl apply -f nginx-deployment.yaml
kubectl apply -f nginx-service.yaml
```

### 4. Access the Application

Assuming you're using a Kubernetes cluster with an external IP (like a LoadBalancer service or Ingress), you should be able to access your application via the Nginx service. If you're running on Minikube or another local setup, you might need to use `kubectl port-forward` to access it.

For example:

```sh
kubectl port-forward service/nginx-service 8080:80
```

Then, you can access your application at `http://localhost:8080`.

### Summary

1. **Ensure Apache deployment is running** and exposed via a Service.
2. **Create an Nginx deployment** with a ConfigMap containing the proxy configuration.
3. **Expose Nginx** via a Service.
4. **Apply the configurations** to your Kubernetes cluster.

This setup will route traffic from Nginx to your Apache server, using Nginx as a reverse proxy.